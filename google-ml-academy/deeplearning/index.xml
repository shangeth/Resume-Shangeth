<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Course Overview on Shangeth</title>
    <link>/google-ml-academy/deeplearning/</link>
    <description>Recent content in Course Overview on Shangeth</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; {year} Shangeth Rajaa</copyright>
    <lastBuildDate>Sun, 09 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/google-ml-academy/deeplearning/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>/google-ml-academy/deeplearning/1.1/</link>
      <pubDate>Sat, 06 Jul 2019 00:00:00 +0100</pubDate>
      
      <guid>/google-ml-academy/deeplearning/1.1/</guid>
      <description>Open in GitHub
Google ML Academy 2019 Instructor: Shangeth Rajaa 
Before starting with Neural Networks, we will look into 2 important machine learning models to understand regression and classification tasks - Linear Regression (Regression) - Logistic Regression (Classification)
Linear Regression Most of the Deep learning Courses do not start with linear regression(LinReg), but LinReg gave me a better understanding of machine learning, so i will start with that, hoping that will make the understanding of Neural networks easier.</description>
    </item>
    
    <item>
      <title></title>
      <link>/google-ml-academy/deeplearning/1.2/</link>
      <pubDate>Sat, 06 Jul 2019 00:00:00 +0100</pubDate>
      
      <guid>/google-ml-academy/deeplearning/1.2/</guid>
      <description>Google ML Academy 2019
Instructor: Shangeth Rajaa 
Task - 1  Get X and y from dataset() function Train a Linear Regression model for this dataset. Visualize the model prediction  Dataset Call dataset() function to get X, y
import numpy as np import matplotlib.pyplot as plt def dataset(show=True): X = np.arange(-25, 25, 0.1) y = X**2 + 20 + np.random.randn(500)*50 if show: plt.scatter(X, y) plt.show() return X, y X, y = dataset()  &amp;lt;Figure size 640x480 with 1 Axes&amp;gt;  Scaling Dataset The maximum value of y in the dataset goes upto 700 and the minimum values is less than 0.</description>
    </item>
    
  </channel>
</rss>